// <auto-generated />
using System;
using LikeTours.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LikeTours.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LikeTours.Data.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoAreImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoAreText")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactWay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdultAgeFrom")
                        .HasColumnType("int");

                    b.Property<decimal?>("AdultFinalTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ChildAgeFrom")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChildFinalTo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimateDuration")
                        .HasColumnType("int");

                    b.Property<bool>("HasSale")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceAdult")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceChild")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SaleAmount")
                        .HasColumnType("int");

                    b.Property<string>("SaleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TourTypeId");

                    b.HasIndex("Lang", "PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("Lang", "PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.HasIndex("Lang", "PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("Lang", "QuestionId")
                        .IsUnique()
                        .HasFilter("[QuestionId] IS NOT NULL");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("Lang", "ReviewId")
                        .IsUnique()
                        .HasFilter("[ReviewId] IS NOT NULL");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("SectionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LikeTours.Data.Models.TourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TourTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TourTypeId");

                    b.HasIndex("Lang", "TourTypeId")
                        .IsUnique()
                        .HasFilter("[TourTypeId] IS NOT NULL");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("LikeTours.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LikeTours.Data.Models.About", b =>
                {
                    b.HasOne("LikeTours.Data.Models.About", "MainAbout")
                        .WithMany("RefferenceAbout")
                        .HasForeignKey("AboutId");

                    b.Navigation("MainAbout");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Image", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Package", "Package")
                        .WithMany("Images")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Package", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Package", "MainPackage")
                        .WithMany("RefferencePackages")
                        .HasForeignKey("PackageId");

                    b.HasOne("LikeTours.Data.Models.Place", "Place")
                        .WithMany("Packages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LikeTours.Data.Models.TourType", "TourType")
                        .WithMany("Packages")
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainPackage");

                    b.Navigation("Place");

                    b.Navigation("TourType");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Payment", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Payment", "MainPayment")
                        .WithMany("RefferencePayments")
                        .HasForeignKey("PaymentId");

                    b.Navigation("MainPayment");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Place", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Place", "MainPlace")
                        .WithMany("RefferencePlaces")
                        .HasForeignKey("PlaceId");

                    b.Navigation("MainPlace");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Questions", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Questions", "MainQuetion")
                        .WithMany("RefferenceQuestion")
                        .HasForeignKey("QuestionId");

                    b.Navigation("MainQuetion");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Review", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LikeTours.Data.Models.Review", "MainReview")
                        .WithMany("RefferenceReview")
                        .HasForeignKey("ReviewId");

                    b.Navigation("MainReview");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Section", b =>
                {
                    b.HasOne("LikeTours.Data.Models.Package", "Package")
                        .WithMany("Sections")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("LikeTours.Data.Models.TourType", b =>
                {
                    b.HasOne("LikeTours.Data.Models.TourType", "MainTourType")
                        .WithMany("RefferenceTypes")
                        .HasForeignKey("TourTypeId");

                    b.Navigation("MainTourType");
                });

            modelBuilder.Entity("LikeTours.Data.Models.About", b =>
                {
                    b.Navigation("RefferenceAbout");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Package", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RefferencePackages");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Payment", b =>
                {
                    b.Navigation("RefferencePayments");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Place", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("RefferencePlaces");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Questions", b =>
                {
                    b.Navigation("RefferenceQuestion");
                });

            modelBuilder.Entity("LikeTours.Data.Models.Review", b =>
                {
                    b.Navigation("RefferenceReview");
                });

            modelBuilder.Entity("LikeTours.Data.Models.TourType", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("RefferenceTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
